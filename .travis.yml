language: java

sudo: false

addons:
  hosts:
    - mysql

env:
  global:
    -CLOUDSDK_CORE_DISABLE_PROMPTS=1
    
services:
  - docker

install:
  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

before_script:
  - mvn clean

jobs:
  include:
    - stage: unit tests
      install: skip
      jdk: oraclejdk11
      script: mvn test -Dtest=com.napier.sem.LanguageReportTest,com.napier.sem.CountryReportTest,com.napier.sem.CityReportTest
    - stage: integration tests
      jdk: oraclejdk11
      script: docker-compose run integration_tests
    - stage: GitHub Release
      # We don't want to install
      install: skip
      # We will build the JAR
      jdk: oraclejdk11
      script:
        - echo "Deploying to GitHub Releases"
        # Package (build) the JAR
        - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
      before_deploy:
        # Set up git user name and tag this commit
        - git config --local user.name "Marx1211"
        - git config --local user.email "mdfp1211@gmail.com"
        # Create temporary tag from date and Git log.
        - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y-%m-%d')-$(git log --format=%h -1)}
        # Set tag
        - git tag $TRAVIS_TAG
      deploy:
        provider: releases
        # This is the token we set before
        api_key: $GITHUB_OAUTH_TOKEN
        # Copy built JAR file to release.  JAR built in $TRAVIS_BUILD_DIR/target
        file: $TRAVIS_BUILD_DIR/target/seMethods.jar
        skip_cleanup: true

    - stage: Google Cloud Deploy
      install: skip
      jdk: oraclejdk11
      before_script:
        # Check if Google Cloud SDK is installed.
        - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash
          > /dev/null; fi
        - source $HOME/google-cloud-sdk/path.bash.inc
        # Install Kubernetes control to manage containers
        - gcloud components install kubectl
        - gcloud version
        # Login to our Google Cloud Account using credentials file
        - gcloud auth activate-service-account --key-file client-secret.json
      script:
        # Set the project we will work in.
        - gcloud config set project semethods-237115
        # Set the zone to work in.
        - gcloud config set compute/zone europe-west2-b
        # Assign project ID to a variable to make life easier
        - export PROJECT_ID="$(gcloud config get-value project -q)"
        # Authenticate against Google's Docker image manager.
        - gcloud auth configure-docker
        # Build the database image.
        - docker build -t gcr.io/${PROJECT_ID}/db db/.
        # Push the database image.
        - docker push gcr.io/${PROJECT_ID}/db
        # Create a container cluster.  We only need one node.
        - gcloud container clusters create hr-cluster --num-nodes=1
        # Tell kubernetes to run the built database image, opening port 3306
        - kubectl run hr --image=gcr.io/${PROJECT_ID}/db --port 3306
        # Expose the cluster to the Internet, mapping external port 3306 to internal port 3306.
        - kubectl expose deployment hr --port=3306 --target-port=3306 --type=LoadBalancer

after_success:
  # Push code coverage data to codecov.
  - bash <(curl -s https://codecov.io/bash)

before_install:
  - openssl aes-256-cbc -K $encrypted_f7e1ca0be34e_key -iv $encrypted_f7e1ca0be34e_iv
    -in client-secret.json.enc -out client-secret.json -d
